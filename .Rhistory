library(leaflet)
library(RColorBrewer)
library(rgdal)
library(raster)
library(ggmap)
###Load and clean data
source("loadData.R")
###GGPLOT
#MAP 1: map with ggplot
map <- ggplot() +
geom_point(data=berkeleyCrime, aes(x=long, y=lat))
map
#MAP 2: adding a background map using ggmap
background <- get_map(location=c(lon = mean(berkeleyCrime$long),
lat = mean(berkeleyCrime$lat)),
zoom=14,
maptype = "terrain",
source="google",
color="bw")
#EXPLORE: change maptype from "terrain" to "satellite".
#EXPLORE: change color from "bw" to "color".
#EXPLORE MORE: In the console, type ?get_map to view other options to customize your background map
map <- ggmap(background) + coord_equal() +
geom_point(data=berkeleyCrime, aes(x=long, y=lat, alpha=0.3, size=7, color=CVLEGEND)) +
scale_size_continuous(range = c(3), guide=FALSE) +
scale_alpha_continuous(range = c(.3), guide=FALSE)
map
##MAP 3: map data with Leaflet.js
leaflet(berkeleyCrime) %>%
addProviderTiles("CartoDB.Positron") %>%
#EXPLORE: Change 'CartoDB.Positron' to 'Esri.WorldImagery' or one of the other
#provider tiles available at http://leaflet-extras.github.io/leaflet-providers/preview/
addCircleMarkers(
stroke = FALSE, fillOpacity = 0.5, radius=4,
popup = ~paste("<strong>Offense:</strong>",OFFENSE)
) #%>% addMarkers(lng=-122.2579, lat=37.87004, popup="Barrows Hall")
#EXPLORE: uncomment previous line to add a marker on top of Barrows Hall
#EXPLORE MORE: run ?addControl to view all of the different layers you can add to Leaflet
## QUESTION  - how to add polygons??
help()
library(curl)
# Geocoding with Yahoo Placefinder
# 2000 addresses per day limit
#following zev ross blog
# http://zevross.com/blog/2015/05/19/scrape-website-data-with-the-new-r-package-rvest/
#You need to first apply for an account on https://developer.yahoo.com
# If you haven't already installed rydn get it now using devtools
# devtools::install_github("trestletech/rydn")
library(rydn)
# readin your keys from YDN (don't share)
source "keys/ydn_keys.R"
#mykey="dj0.......................00Zg--"
#mysecret ="00....................8"
#test it
myloc <- find_place("68 york drive, piedmont,ca",key=mykey,secret=mysecret)
myloc #see what was returned
# work with subset of the returned info
myloc <- myloc[1 ,c("quality",  "latitude", "longitude", "radius")] #subset
library(rydn)
source "../keys/ydn_keys.R"
source "../keys/ydn_keys.R"
source("../keys/ydn_keys.R")
dir('../keys/')
dir('../')
setwd("~/Documents/Dlab/dlab_workshops/rgeocoding")
source "../keys/ydn_keys.R"
source("../keys/ydn_keys.R")
dir()
source("keys/ydn_keys.R")
myloc <- find_place("68 york drive, piedmont,ca",key=mykey,secret=mysecret)
myloc #see what was returned
str(myloc)
myloc_sub <- myloc[1 ,c("quality",  "latitude", "longitude", "radius")] #subset
myloc_sub
myloc #see what was returned
myloc <- find_place("Barrows Hall, Berkeley,ca",key=mykey,secret=mysecret)
myloc #see what was returned
myloc_sub <- myloc[1 ,c("quality",  "latitude", "longitude", "radius")] #subset
library(ggmap)
?qmap
qmap(location=c(myloc_sub$longitude,myloc_sub$latitude), zoom=12)
qmap(location=c(lon=myloc_sub$longitude,lat=myloc_sub$latitude), zoom=12)
qmap(location=c(lon=myloc_sub$longitude,lat=myloc_sub$latitude))
?get_map
myloc_sub$longitude
as.numeric(myloc_sub$longitude)
qmap(location=c(lon=as.numeric(myloc_sub$longitude),lat=as.numeric(myloc_sub$latitude))
)
qmap(location=c(lon=as.numeric(myloc_sub$longitude),lat=as.numeric(myloc_sub$latitude), zoom=14)
+ geom_point((x=as.numeric(myloc_sub$longitude), y=as.numeric(myloc_sub$latitude), col="orange", size=6))
qmap(location=c(lon=as.numeric(myloc_sub$longitude),lat=as.numeric(myloc_sub$latitude)), zoom=14) +
geom_point(x=as.numeric(myloc_sub$longitude), y=as.numeric(myloc_sub$latitude), col="orange", size=6)
qmap(location=c(lon=as.numeric(myloc_sub$longitude),lat=as.numeric(myloc_sub$latitude)), zoom=17) +
geom_point(x=as.numeric(myloc_sub$longitude), y=as.numeric(myloc_sub$latitude), col="orange", size=6)
qmap(location=c(lon=as.numeric(myloc_sub$longitude),lat=as.numeric(myloc_sub$latitude)), zoom=17) +
geom_point(col="orange", size=6)
map <- get_map(location=c(lon=as.numeric(myloc_sub$longitude),lat=as.numeric(myloc_sub$latitude)), zoom=17))
map <- get_map(location=c(lon=as.numeric(myloc_sub$longitude),lat=as.numeric(myloc_sub$latitude)), zoom=17)
ggmap(map) +
geom_point(aes(x = long, y = lat, size = 6, col="red"), data = myloc, alpha = .9)
geom_point(aes(x = longitude, y = latitude, size = 6, col="red"), data = myloc, alpha = .9)
source("keys/ydn_keys.R")
ggmap(map) +
geom_point(aes(x = longitude, y = latitude, size = 6, col="red"), data = myloc, alpha = .9)
ggmap(map) +
geom_point(aes(x = longitude, y = latitude, size = 6, col="red"), data = myloc)
myloc
str(myloc)
myloc$longitude <- as.numeric(myloc$longitude)
myloc$latitude <- as.numeric(myloc$latitude)
map <- get_map(location=c(lon=as.numeric(myloc_sub$longitude),lat=as.numeric(myloc_sub$latitude)), zoom=17)
ggmap(map) +
geom_point(aes(x = longitude, y = latitude, size = 6, col="red"), data = myloc)
ggmap(map) +
geom_point(aes(x = longitude, y = latitude), size = 6, col="red", data = myloc)
?curl
tiger_input_addressFile <- "tiger/tiger_12addresses_to_geocode.csv"
tiger_url_prefix <- "http://geocoding.geo.census.gov/geocoder/geographies/addressbatch"
tiger_url_options <- "--form benchmark=Public_AR_Census2010 --form vintage=Census2010_Census2010"
tiger_url_address_options <- paste0("--form addressFile=@", tiger_input_addressFile)
tiger_url <- paste(tiger_url_prefix, tiger_url_options, tiger_url_address_options)
tiger_url
curl(tiger_url)
r<- curl(tiger_url)
r
con <- curl(tiger_url)
readLines(con)
readLines(curl(tiger_url))
tiger_url
dir()
dir('tiger')
readLines(curl("--form addressFile=@tiger/tiger_12addresses_to_geocode.csv --form benchmark=Public_AR_Census2010 --form vintage=Census2010_Census2010 http://geocoding.geo.census.gov/geocoder/geographies/addressbatch"))
??rcurl
h <- new_handle()
handle_setform(h, addressFile='tiger/tiger_12addresses_to_geocode.csv', benchmark='Public_AR_Census2010', vintage='Census2010_Census2010')
r <- curl(tiger_url_prefix, h)
h <- new_handle()
handle_setopt(h, addressFile='tiger/tiger_12addresses_to_geocode.csv', benchmark='Public_AR_Census2010', vintage='Census2010_Census2010')
h <- new_handle()
handle_setform(h, addressFile='tiger/tiger_12addresses_to_geocode.csv', benchmark='Public_AR_Census2010', vintage='Census2010_Census2010')
req <- curl_fetch_memory(tiger_url_prefix, handle=h)
req
rawToChar(req)
rawToChar(req$content)
big_tiger = "http://geocoding.geo.census.gov/geocoder/geographies/addressbatch --form addressFile=@tiger/tiger_12addresses_to_geocode.csv --form benchmark=Public_AR_Census2010 --form vintage=Census2010_Census2010"
big_tiger
con <- curl(big_tiger)
out <- readLines(con)
close(con)
cat(out, sep = "\n")
out
out <- readLines(con)
req <- curl_fetch_memory(big_tiger)
req
tiger_pre2 = "http://geocoding.geo.census.gov/geocoder/geographies/addressbatch/post"
h <- new_handle()
handle_setform(h, addressFile='tiger/tiger_12addresses_to_geocode.csv', benchmark='Public_AR_Census2010', vintage='Census2010_Census2010')
req <- curl_fetch_memory(tiger_pre2, h)
req
rawToChar(req$content)
h
h$curl_handle
req <- curl_fetch_memory(tiger_pre2, handle=h)
req
library(httr)
mystuff <- list()
mystuff <- list( addressFile="@tiger/tiger_12_addresses_to_geocode.csv", benchmark="Public_AR_Census2010", vintage="Census2010_Census2010")
mystuff
res <- POST(tiger_url_prefix, body=mystuff, encode="form", verbose())
res
tiger_get
tiger_get <- "http://geocoding.geo.census.gov/geocoder/geographies/addressbatch/get"
mystuff
r <- GET(tiger_get, query = mystuff)
r
tiger_pre2
r <- POST(tiger_pre2, body = mystuff, encode = "form")
r
r <- POST(url, body = body, encode = "multipart")
r <- POST(tiger_pre2, body = body, encode = "multipart")
r <- POST(tiger_pre2, body = mystuff, encode = "multipart")
r
r <- POST(tiger_pre2, body = mystuff, encode = "json")
r
r <- POST(tiger_pre2, body = mystuff, encode = "multipart")
str(r)
r$output
r$options
r$content
rawToChar(r$content)
r <- POST(tiger_pre2, body = mystuff, encode = "form")
rawToChar(r$content)
tiger_url_prefix
a <- POST(tiger_url_prefix, encode="multipart", body=list(addressFile=upload_file(tiger_input_addressFile), benchmark="Public_AR_Census2010",vintage="Census2010_Census2010"))
a
ga <- POST(tiger_url_prefix, encode="multipart",
body=list(addressFile=upload_file(tiger_input_addressFile),
benchmark="Public_AR_Census2010",
vintage="Census2010_Census2010")
)
a <- POST(tiger_url_prefix, encode="multipart", body=list(addressFile=upload_file(tiger_input_addressFile), benchmark="Public_AR_Census2010",vintage="Census2010_Census2010"))
ga
geocoded_addresses <- POST(tiger_url_prefix, encode="multipart",
body=list(addressFile=upload_file(tiger_input_addressFile),
benchmark="Public_AR_Census2010",
vintage="Census2010_Census2010"
),
verbose()
)
str(geocoded_addresses)
str(geocoded_addresses$content)
str(geocoded_addresses$output)
geocoded_addresses
str(geocoded_addresses$output)
str(geocoded_addresses)
geocoded_addresses <- POST(tiger_url_prefix, encode="multipart",
body=list(addressFile=upload_file(tiger_input_addressFile),
benchmark="Public_AR_Census2010",
vintage="Census2010_Census2010"
)
)
geocoded_addresses
geocoded_addresses$content
rawToChar(geocoded_addresses$content)
content(geocoded_addresses$content)
content(geocoded_addresses)
donk <- as.data.frame(content(geocoded_addresses))
donk
head(donk)
str(donk)
df <- readChar(content(geocoded_addresses))
df
class(donk)
donk <- content(geocoded_addresses)
class(donk)
head(donk)
donk2 <- read.table(donk)
donk
cat(rawToChar(geocoded_addresses))
cat(rawToChar(geocoded_addresses$content))
donkey <- cat(rawToChar(geocoded_addresses$content))
donky
donkey
donkey <- cat(rawToChar(geocoded_addresses$content))
head(donkey)
?POST
donkey <- caputure.output(cat(rawToChar(geocoded_addresses$content)))
donkey <- capture.output(cat(rawToChar(geocoded_addresses$content)))
donkey
x <- read.table(donkey, header=F)
head(donkey)
class(donkey)
str(donkey)
x <- as.data.frame(donkey)
x
head(x)
names(x)
colnames(x)
x[1,1]
names(x)
??capture.output
donkey <- capture.output(cat(rawToChar(geocoded_addresses$content)), split=T)
head(donkey)
class(donkey)
str(donkey)
donkey[6]
testVect <- capture.output(cat(rawToChar(geocoded_addresses$content)), split=T)
data.frame(lapply(testVect, type.convert), stringsAsFactors=FALSE)
x<- data.frame(lapply(testVect, type.convert), stringsAsFactors=FALSE)
x
str(x)
x
?read.table
?read.ftable
write.table(donkey)
class(donkey)
type(donkey)
str(donkey)
donkey
?rawToChar
cat(geocoded_addresses$content)
cat(content(geocoded_addresses))
x <- capture.output(cat(content(geocoded_addresses)))
x
x <- capture.output(cat(content(geocoded_addresses)), split=T)
x
x <- capture.output(cat(content(geocoded_addresses)), split=T)
?capture.output
do.call(paste, as.list(capture.output(cat(content(geocoded_addresses)), split=T)))
do.call(paste, as.list(capture.output(cat(content(geocoded_addresses)))))
capture.output(cat(content(geocoded_addresses)), file="test_out.txt")
dir()
x <- read.table("text_out.txt",header=FALSE)
dir()
x <- read.table("test_out.txt",header=FALSE)
x
?read.table
x <- read.csv("test_out.txt",header=FALSE,)
x
head(x)
cat(content(geocoded_addresses))
rm(list=ls())
objects()
sessionInfo()
#Load libraries
library(httr)
#set working directory
setwd("~/Documents/Dlab/dlab_workshops/rgeocoding")
# CLI format for CURL
#format of geocoding request for Tiger Geocoder
#curl --form addressFile=@tiger_12addresses_to_geocode.csv --form benchmark=Public_AR_Census2010 --form vintage=Census2010_Census2010 http://geocoding.geo.census.gov/geocoder/geographies/addressbatch
### or this if saving to file as indicated by -o flag
#curl --form addressFile=@tiger_12addresses_to_geocode.csv --form benchmark=Public_AR_Census2010 --form vintage=Census2010_Census2010 http://geocoding.geo.census.gov/geocoder/geographies/addressbatch
##  -o geocoded_addresses_with_fips.csv
tiger_input_addressFile <- "tiger/tiger_12addresses_to_geocode.csv"
tiger_url <- "http://geocoding.geo.census.gov/geocoder/geographies/addressbatch"
# works from command line:
# curl --form addressFile=@tiger/tiger_12addresses_to_geocode.csv --form benchmark=Public_AR_Census2010 --form vintage=Census2010_Census2010 http://geocoding.geo.census.gov/geocoder/geographies/addressbatch
##curl http://geocoding.geo.census.gov/geocoder/geographies/addressbatch
##--form addressFile=@tiger/tiger_12addresses_to_geocode.csv
##--form benchmark=Public_AR_Census2010
##--form vintage=Census2010_Census2010
## WORKED - thanks to: http://stackoverflow.com/questions/26611289/curl-post-statement-to-rcurl-or-httr
## add verbose() to see details of process
## Using httr I think
geocoded_addresses <- POST(tiger_url, encode="multipart",
body=list(addressFile=upload_file(tiger_input_addressFile),
benchmark="Public_AR_Census2010",
vintage="Census2010_Census2010"
)
)
#write raw output to file
capture.output(cat(content(geocoded_addresses)), file="test_out2.txt")
#read output file in to a data frame (not sure how to do these two in one step)
x <- read.csv("test_out2.txt",header=FALSE)
x
x$V6
str(x)
x <- read.csv("test_out2.txt",header=FALSE,stringsAsFactors = FALSE)
x$V6
str(x)
x$V6[1]
split(x$V6[1])
split(x$V6[1],f=
",")
?split
strsplit(x$V6[1])
strsplit(x$V6[1],split=",")
strsplit(x$V6[1],split=",")[1]
strsplit(x$V6[1],split=",")[1,1]
strsplit(x$V6[1],split=",")[0]
y <-strsplit(x$V6[1],split=",")
y
y[1]
y[1][0]
y[[1]]
y <-strsplit(x$V6[1],split=",")[[1]]
y
y <-strsplit(x$V6[1],split=",")[[1]]
noquote(strsplit("A text I want to display with spaces", NULL)[[1]])
k <- noquote(strsplit("A text I want to display with spaces", NULL)[[1]])
k
str(k)
k[1]
k[3]
unlist(x$V6[1])
unlist(strsplit(x$V6[1])
)
unlist(strsplit(x$V6[1],","))
unlist(strsplit(x$V6[1],","))[[1]]
unlist(strsplit(x$V6[1],","))[[0]]
unlist(strsplit(x$V6[1],","))[[2]]
x$longitude <- as.numeric(unlist(strsplit(x$V6[1],","))[[1]])
x$latitude <- as.numeric(unlist(strsplit(x$V6[1],","))[[2]])
head(x)
#lets plot it
library(ggplot2)
library(ggmap)
map <- get_map(location=c(lon=x$longitude,lat=x$latitude), zoom=14)
map <- get_map(location=c(lon=x$longitude[1],lat=x$latitude[1]), zoom=14)
ggmap(map) +
geom_point(aes(x = longitude, y = latitude), size = 6, col="red", data = x)
x
x$longitude <- as.numeric(unlist(strsplit(x$V6,","))[[1]])
x$latitude <- as.numeric(unlist(strsplit(x$V6,","))[[2]])
ggmap(map) +
geom_point(aes(x = longitude, y = latitude), size = 6, col="red", data = x)
x
as.numeric(unlist(strsplit(x$V6,","))[[1]])
as.numeric(unlist(strsplit(x$V6,","))[[1]])
x
x$V6
x2 <- lapply(x, function(a) {
x$lon <- as.numeric(unlist(strsplit(a$V6,","))[[1]])
a$lat <- as.numeric(unlist(strsplit(a$V6,","))[[2]])
}
)
x2 <- lapply(x, function(a) {
x$lon <- as.numeric(unlist(strsplit(a$V6,","))[[1]])
a$lat <- as.numeric(unlist(strsplit(a$V6,","))[[2]])
})
x2
x$lon <- sapply(strsplit(as.numeric(x$V6), ","), `[`, 1)
x$lon
x$V6
x$lon = unlist(lapply(x$V6, function (x) strsplit(as.character(x), ",", fixed=TRUE)[[1]][1]))
x$lon
x$lat = unlist(lapply(x$V6, function (x) strsplit(as.character(x), ",", fixed=TRUE)[[1]][2]))
x$lat
x$V6, x$lon
x[c(V6, lon, lat),]
x[c(V6, lon, lat)]
x$V6
x[,c(V6, lon, lat)]
x[,c("V6", "lon", "lat")]
mylocs <- read.csv("test_out.txt",header=FALSE)
head(mylocs)
#doh split the lat,long values into two separate columns
mylocs$lon = unlist(lapply(mylocs$V6, function (x) strsplit(as.character(x), ",", fixed=TRUE)[[1]][1]))
mylocs$lat = unlist(lapply(mylocs$V6, function (x) strsplit(as.character(x), ",", fixed=TRUE)[[1]][2]))
mylocs
#lets plot it
library(ggplot2)
library(ggmap)
map <- get_map(location=c(lon=mylocs$lon[1],lat=x$lat[1]), zoom=12)
ggmap(map) +
geom_point(aes(x = lon, y = lat), size = 6, col="red", data = mylocs)
#doh split the lat,long values into two separate columns
mylocs$lon = unlist(lapply(mylocs$V6, function (x) strsplit(as.numeric(x), ",", fixed=TRUE)[[1]][1]))
mylocs$lat = unlist(lapply(mylocs$V6, function (x) strsplit(as.numeric(x), ",", fixed=TRUE)[[1]][2]))
ggmap(map) +
geom_point(aes(x = lon, y = lat), size = 6, col="red", data = mylocs)
ggmap(map) +
geom_point(aes(x = lon, y = lat), size = 6, col="red", data = mylocs)
mylocs$lon = unlist(lapply(mylocs$V6, function (x) strsplit(as.character(x), ",", fixed=TRUE)[[1]][1]))
mylocs$lat = unlist(lapply(mylocs$V6, function (x) strsplit(as.character(x), ",", fixed=TRUE)[[1]][2]))
x[,c("V6", "lon", "lat")]
str(mylocs)
mylocs$lon <- as.numeric(mylocs$lon)
mylocs$lat <- as.numeric(mylocs$lat)
map <- get_map(location=c(lon=mylocs$lon[1],lat=x$lat[1]), zoom=12)
ggmap(map) +
geom_point(aes(x = lon, y = lat), size = 6, col="red", data = mylocs)
map <- get_map(location=c(lon=mylocs$lon[1],lat=x$lat[1]), zoom=14)
ggmap(map) +
geom_point(aes(x = lon, y = lat), size = 6, col="red", data = mylocs)
mylocs$lon
mylocs$lon[1]
mylocs$lat[1]
str(mylocs)
map <- get_map(location=c(lon=mylocs$lon[1],lat=mylocs$lat[1]), zoom=14)
ggmap(map) +
geom_point(aes(x = lon, y = lat), size = 4, col="red", data = mylocs)
map <- get_map(location=c(lon=mylocs$lon[1],lat=mylocs$lat[1]), zoom=15)
geom_point(aes(x = lon, y = lat), size = 4, col="red", data = mylocs)
ggmap(map) +
geom_point(aes(x = lon, y = lat), size = 4, col="red", data = mylocs)
mean(mylocs$lon)
mean(mylocs$lat)
map <- get_map(location=c(lon=mean(mylocs$lon),lat=mean(mylocs$lat), zoom=15)
)
map <- get_map(location=c(lon=mean(mylocs$lon),lat=mean(mylocs$lat)), zoom=15)
ggmap(map) +
geom_point(aes(x = lon, y = lat), size = 4, col="red", data = mylocs)
#
# Geocoding with Tiger Geocoding Service
#
#clean environment
rm(list=ls())
#Load libraries
library(httr)
#set working directory
setwd("~/Documents/Dlab/dlab_workshops/rgeocoding")
# CLI format for CURL
#format of geocoding request for Tiger Geocoder
#curl --form addressFile=@tiger_12addresses_to_geocode.csv --form benchmark=Public_AR_Census2010 --form vintage=Census2010_Census2010 http://geocoding.geo.census.gov/geocoder/geographies/addressbatch
### or this if saving to file as indicated by -o flag
#curl --form addressFile=@tiger_12addresses_to_geocode.csv --form benchmark=Public_AR_Census2010 --form vintage=Census2010_Census2010 http://geocoding.geo.census.gov/geocoder/geographies/addressbatch
##  -o geocoded_addresses_with_fips.csv
tiger_input_addressFile <- "tiger/tiger_12addresses_to_geocode.csv"
tiger_url <- "http://geocoding.geo.census.gov/geocoder/geographies/addressbatch"
# works from command line:
# curl --form addressFile=@tiger/tiger_12addresses_to_geocode.csv --form benchmark=Public_AR_Census2010 --form vintage=Census2010_Census2010 http://geocoding.geo.census.gov/geocoder/geographies/addressbatch
##curl http://geocoding.geo.census.gov/geocoder/geographies/addressbatch
##--form addressFile=@tiger/tiger_12addresses_to_geocode.csv
##--form benchmark=Public_AR_Census2010
##--form vintage=Census2010_Census2010
## WORKED - thanks to: http://stackoverflow.com/questions/26611289/curl-post-statement-to-rcurl-or-httr
## add verbose() to see details of process
## Using httr I think
geocoded_addresses <- POST(tiger_url, encode="multipart",
body=list(addressFile=upload_file(tiger_input_addressFile),
benchmark="Public_AR_Census2010",
vintage="Census2010_Census2010"
)
)
#write raw output to file
capture.output(cat(content(geocoded_addresses)), file="test_out2.txt")
#read output file in to a data frame (not sure how to do these two in one step)
mylocs <- read.csv("test_out.txt",header=FALSE)
head(mylocs)
#doh split the lat,long values into two separate columns
mylocs$lon = unlist(lapply(mylocs$V6, function (x) strsplit(as.character(x), ",", fixed=TRUE)[[1]][1]))
mylocs$lat = unlist(lapply(mylocs$V6, function (x) strsplit(as.character(x), ",", fixed=TRUE)[[1]][2]))
mylocs$lon <- as.numeric(mylocs$lon)
mylocs$lat <- as.numeric(mylocs$lat)
#lets plot it
library(ggplot2)
library(ggmap)
map <- get_map(location=c(lon=mean(mylocs$lon),lat=mean(mylocs$lat)), zoom=15)
ggmap(map) +
geom_point(aes(x = lon, y = lat), size = 4, col="red", data = mylocs)
